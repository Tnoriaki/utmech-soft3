;; define making object funcs
(defun make-laptop-base nil
  (let (b)
    (setq b (make-cube 60 40 2))
    (send b :locate #f(0 20 0))
    (send b :set-color :gray60)
    b))
(defun make-laptop-desktop-front nil
  (let (b)
    (setq b (make-cube 60 1 40))
    (send b :locate #f(0 -1 20))
    (send b :set-color :gray60)
    b))
(defun make-laptop-desktop-back nil
  (let (b)
    (setq b (make-cube 59 1.01 39))
    (send b :locate #f(0 -0.99 20))
    (send b :set-color :black)
    b))
(defun make-laptop-axis nil
  (let (b)
    (setq b (make-cylinder 1.2 44))
    (send b :locate #f(-22 0 1))
    (send b :rotate 1.5707 :y)
    (send b :set-color :gray10)
    b))
;; keyboards
(defun make-keyboard-1-l1 (offset)
  (let (b)
    (setq b (make-cube 2.8 1 2.3))
    (send b :locate (float-vector (- 25 offset) 5 0.3))
    (send b :set-color :black)
    b))
(defun make-keyboard-2-l2 (offset)
  (let (b)
    (setq b (make-cube 2.8 2.8 2.3))
    (send b :locate (float-vector (- 25 offset) 8 0.3))
    (send b :set-color :black)
    b))
(defun make-keyboard-3-l2 (offset)
  (let (b)
    (setq b (make-cube 4.3 2.8 2.3))
    (send b :locate (float-vector (- 25 offset) 8 0.3))
    (send b :set-color :black)
    b))
(defun make-keyboard-2-l3 (offset)
  (let (b)
    (setq b (make-cube 2.8 2.8 2.3))
    (send b :locate (float-vector (- 25 offset) 12 0.3))
    (send b :set-color :black)
    b))
(defun make-keyboard-2-l4 (offset)
  (let (b)
    (setq b (make-cube 2.8 2.8 2.3))
    (send b :locate (float-vector (- 25 offset) 16 0.3))
    (send b :set-color :black)
    b))
(defun make-keyboard-4-l4 (offset)
  (let (b)
    (setq b (make-cube 3.8 2.8 2.3))
    (send b :locate (float-vector (- 25 offset) 16 0.3))
    (send b :set-color :black)
    b))
(defun make-keyboard-enter ()
  (let (b1 b2)
    (setq b1 (make-cube 4.5 2.8 2.3))
    (send b1 :locate (float-vector -24 12 0.3))
    (setq b2 (make-cube 4.0 5 2.3))
    (send b2 :locate (float-vector -24.4 15 0.3))
    (setq b1 (body+ b1 b2))
    (send b1 :set-color :black)
    b1))
(defun make-keyboard-shift (offset)
  (let (b)
    (setq b (make-cube 5.3 2.8 2.3))
    (send b :locate (float-vector (- 25 offset) 20 0.3))
    (send b :set-color :black)
    b))
(defun make-keyboard-2-l5 (offset)
  (let (b)
    (setq b (make-cube 2.8 2.8 2.3))
    (send b :locate (float-vector (- 25 offset) 20 0.3))
    (send b :set-color :black)
    b))
(defun make-keyboard-5-l6 (offset)
  (let (b)
    (setq b (make-cube 2.4 2.8 2.3))
    (send b :locate (float-vector (- 25 offset) 24 0.3))
    (send b :set-color :black)
    b))
(defun make-keyboard-4-l6 (offset)
  (let (b)
    (setq b (make-cube 3.8 2.8 2.3))
    (send b :locate (float-vector (- 25 offset) 24 0.3))
    (send b :set-color :black)
    b))
(defun make-keyboard-space ()
  (let (b)
    (setq b (make-cube 15 2.8 2.3))
    (send b :locate (float-vector 2.5 24 0.3))
    (send b :set-color :black)
    b))
(defun make-keyboard-1-l6 (offset)
  (let (b)
    (setq b (make-cube 2.8 1.4 2.3))
    (send b :locate (float-vector (- 25 offset) 24.5 0.3))
    (send b :set-color :black)
    b))
;; set objects
(setq b1 (make-laptop-base))
(setq b2 (make-laptop-desktop-front))
(setq b3 (make-laptop-desktop-back))
(setq b4 (make-laptop-axis))
(send b2 :assoc b3)
(send b3 :assoc b4)
;; k1 bodies
(setq k1-bodies nil)
(dotimes (i 14)
  (setq k1-bodies (append k1-bodies (list (make-keyboard-1-l1 (* 3.8 i))))))
(dolist (bdy k1-bodies) (send b1 :assoc bdy))
;; k2 bodies
(setq k2-bodies nil)
(dotimes (i 14)
  (if (= i 0)
    (setq k2-bodies (append k2-bodies (list (make-keyboard-3-l2 (+ 0.7 (* 3.7 i))))))
    (setq k2-bodies (append k2-bodies (list (make-keyboard-2-l2 (+ 1.5 (* 3.7 i))))))))
(dolist (bdy k2-bodies) (send b1 :assoc bdy))
;; k3 bodies
(setq k3-bodies nil)
(dotimes (i 14)
  (if (= i 13)
    (setq k3-bodies (append k3-bodies (list (make-keyboard-enter))))
    (setq k3-bodies (append k3-bodies (list (make-keyboard-2-l3 (* 3.7 i)))))))
(dolist (bdy k3-bodies) (send b1 :assoc bdy))
;; k4 bodies
(setq k4-bodies nil)
(dotimes (i 13)
  (if (= i 0)
    (setq k4-bodies (append k4-bodies (list (make-keyboard-4-l4 0.5))))
    (setq k4-bodies (append k4-bodies (list (make-keyboard-2-l4 (+ 1.2 (* 3.7 i))))))))
(dolist (bdy k4-bodies) (send b1 :assoc bdy))
;; k5 bodies
(setq k5-bodies nil)
(dotimes (i 13)
  (cond ((= i 0) (setq k5-bodies (append k5-bodies (list (make-keyboard-shift 1.5)))))
        ((= i 12) (setq k5-bodies (append k5-bodies (list (make-keyboard-shift (+ 4.2 (* 3.7 i)))))))
        (t (setq k5-bodies (append k5-bodies (list (make-keyboard-2-l5 (+ 3.0 (* 3.7 i)))))))))
(dolist (bdy k5-bodies) (send b1 :assoc bdy))
;; k6 bodies
(setq k6-bodies nil)
(dotimes (i 11)
  (cond ((= i 0) (setq k6-bodies (append k6-bodies (list (make-keyboard-5-l6 0.0)))))
        ((= i 1) (setq k6-bodies (append k6-bodies (list (make-keyboard-5-l6 3.2)))))
        ((= i 2) (setq k6-bodies (append k6-bodies (list (make-keyboard-4-l6 7.2)))))
        ((= i 3) (setq k6-bodies (append k6-bodies (list (make-keyboard-4-l6 12.0)))))
        ((= i 4) (setq k6-bodies (append k6-bodies (list (make-keyboard-space)))))
        ((= i 5) (setq k6-bodies (append k6-bodies (list (make-keyboard-4-l6 32.5)))))
        ((= i 6) (setq k6-bodies (append k6-bodies (list (make-keyboard-4-l6 37)))))
        ((= i 7) (setq k6-bodies (append k6-bodies (list (make-keyboard-5-l6 41)))))
        ((= i 8) (setq k6-bodies (append k6-bodies (list (make-keyboard-1-l6 44)))))
        ((= i 9) (setq k6-bodies (append k6-bodies (list (make-keyboard-5-l6 47)))))
        ((= i 10) (setq k6-bodies (append k6-bodies (list (make-keyboard-1-l6 50)))))
        ))
(dolist (bdy k6-bodies) (send b1 :assoc bdy))
;; set instances
;; laptop body
(setq h1 (instance bodyset-link
                   :init (make-cascoords)
                   :bodies (append (list b1) k1-bodies k2-bodies k3-bodies k4-bodies k5-bodies k6-bodies)))
;; laptop desktop
(setq s1 (instance bodyset-link
                   :init (make-cascoords)
                   :bodies (list b2 b3 b4)))
;; laptop joint
(setq j1 (instance rotational-joint
                   :init :parent-link h1
                   :child-link s1
                   :axis
                   :x))
; instance cascaded coords
(setq r (instance cascaded-link :init))
(send r :assoc h1)
(send h1 :assoc s1)
(setq (r . links) (list h1 s1))
(setq (r . joint-list) (list j1))
(send r :init-ending)
(objects (list r))

;; move it
(setq i 0)
(do-until-key
  (setq rad (* 90 (sin (/ i 100.0))))
  (if (< rad 60)
    (progn
      (setq vec (float-vector rad))
      (send r :angle-vector vec)
      (send *irtviewer* :draw-objects)
      (x::window-main-one)
      )
    nil
    )
  (setq i (+ i 1))
  )
